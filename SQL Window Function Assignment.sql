-- Q1- Rank the customers based on the total amount they've spent on rentals
select customer_id, sum(amount) as total_amount, rank() over(order by sum(amount) desc) as customer_rank
from payment group by customer_id;

-- Q2-  Calculate the cumulative revenue generated by each film over time.
SELECT f.film_id, f.title, p.payment_date, SUM(p.amount) 
OVER ( PARTITION BY f.film_id ORDER BY  p.payment_date) AS cumulative_revenue
FROM payment p JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;

-- Q3- Determine the average rental duration for each film, considering films with similar lengths
select title, film_id,length, avg(rental_duration) over(partition by length) as avg_rental_duration from film;

-- Q4- Identify the top 3 films in each category based on their rental counts.**
  WITH top_Films AS (
    SELECT fc.category_id, fc.film_id, f.title,
        ROW_NUMBER() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS ranking
    FROM film_category fc
    JOIN rental r ON fc.film_id = r.inventory_id
    JOIN film f ON fc.film_id = f.film_id
    GROUP BY fc.category_id, fc.film_id, f.title
)
SELECT category_id, film_id, title, ranking
FROM top_Films
WHERE ranking <= 3;

-- Q5- Calculate the difference in rental counts between each customer's total rentals and the average rentals
--     across all customers
 SELECT customer_id, COUNT(rental_id) AS total_rentals,
        AVG(COUNT(rental_id)) OVER () AS avg_rentals_across_customers,
        COUNT(rental_id) - AVG(COUNT(rental_id)) OVER () AS rental_difference
    FROM rental GROUP BY customer_id;

-- Q6- Find the monthly revenue trend for the entire rental store over time    
WITH Monthly_Revenue AS (
    SELECT
        DATE_FORMAT(payment_date, '%Y-%m') AS month,
        SUM(amount) AS total_revenue
    FROM
        payment
    GROUP BY
        DATE_FORMAT(payment_date, '%Y-%m')
)
SELECT
    month,
    total_revenue,
    SUM(total_revenue) OVER (ORDER BY month) AS cumulative_revenue
FROM
    Monthly_Revenue;

    
    
-- Q7- Identify the customers whose total spending on rentals falls within the top 20% of all customers
WITH CustomerSpending AS (
    SELECT
        customer_id,
       sum(amount) as  total_spending,
        PERCENT_RANK() OVER (ORDER BY sum(amount) DESC) AS spending_rank
    FROM payment group by customer_id )
SELECT
    customer_id,
    total_spending, spending_rank
FROM CustomerSpending
WHERE spending_rank <= 0.2;

-- Q8- Calculate the running total of rentals per category, ordered by rental count.
SELECT c.name, c.category_id, fc.film_id, f.title, count(rental_id),
SUM(count(rental_id)) OVER (PARTITION BY category_id ORDER BY film_id) AS
running_total_rentals from category as c 
join film_category as fc on c.category_id = fc.category_id
join film as f  on fc.film_id = f.film_id
join inventory as i on f.film_id = i.film_id
join rental as r on i.inventory_id = r.inventory_id 
group by c.name, c.category_id, fc.film_id, f.title;


 
-- Q9-  Find the films that have been rented less than the average rental count for their respective categories.
WITH Rental_count_ AS (
    SELECT
        fc.film_id,
        fc.category_id,
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id) AS avg_rental_count
    FROM
        film_category fc
    JOIN
        rental r ON fc.film_id = r.inventory_id
    GROUP BY
        fc.film_id, fc.category_id
)
SELECT
    rc.category_id, rc.film_id,
    rc.rental_count,
    rc.avg_rental_count
FROM
    Rental_count_ as rc 
WHERE
    rc.rental_count < rc.avg_rental_count;
    
    
-- Q10- Identify the top 5 months with the highest revenue and display the revenue 
-- generated in each month.
SELECT
        DATE_FORMAT(payment_date, '%Y-%m') AS month,
        SUM(amount) AS total_revenue
    FROM
        payment
    GROUP BY month order by total_revenue desc limit 5;    
    
    
    

 
    













